// Name: User Account Failed logons
// Description: Failed logons by a given user during the time of or recently after compromise and in the range of +-1h
//
// Entity: #User
// Input: Username, Account
// Output: Hosts
//
// QueryPeriod:  +-1h default, change as needed
//
// Data Source: #SecurityEvent
//
// Tactics: #Discovery, #LateralMovement
//
let GetAllLogonsForUser = (suspiciousEventTime:datetime, v_User:string){
//+-1h for any logons
let v_StartTime = suspiciousEventTime-1h;
let v_EndTime = suspiciousEventTime+1h;
SecurityEvent 
| where TimeGenerated between (v_StartTime .. v_EndTime)
| where EventID == 4625
| where AccountType == "User"
| where tolower(Account) contains tolower(v_User)
| summarize min(TimeGenerated), max(TimeGenerated) by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress
| project min_TimeGenerated, max_TimeGenerated, EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress
| top 10 by min_TimeGenerated asc nulls last 
};
// change datetime value and <username> value below
GetAllLogonsForUser(datetime('2019-01-20T10:02:51.000'), tolower("<username>"))